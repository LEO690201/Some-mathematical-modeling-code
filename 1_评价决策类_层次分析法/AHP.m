%代码一致性检验
%A=[1 2 3 5;1/2 1 1/2 2;1/3 2 1 1/2;1/5 1/2 2 1];
%A=[1 2 3 5;1/2 1 1/2 2;1/3 2 1 2;1/5 1/2 1/2 1];
A=input('判断矩阵A=');   %输入判断矩阵A
[n,n]=size(A);           %获取矩阵A的行和列
%求出最大特征值和对应的特征向量
[V,D]=eig(A);             %求出矩阵A的特征值和特征向量,V为特征向量矩阵,D为特征值构成的对角矩阵
% eig(A)函数:返回特征值和特征向量
Max_eig=max(max(D));      %先求出每一列的最大值,再求出最大值中的最大值
CI=(Max_eig-n)/(n-1);      %计算一致性指数CI
RI=[0 0.0001 0.52 0.89 1.12 1.26 1.36 1.41 1.46 1.49 1.52 1.54 1.56 1.58 1.59];
%注意:这里RI最多支持n=15
%n=2时,一定是一致性矩阵,所以CI=0,为了避免分母为0,将这里第二个元素改为0.0001
CR=CI/RI(n);              %计算一致性比CR
disp('一致性指数CI=');
disp(CI);
disp('一致性比CR=');
disp(CR);
if CR<0.10
    disp('因为CR<0.10,所以A是一致性矩阵');
else
    disp('因为CR>=0.10,所以A不是一致性矩阵');
end

%% 1.算术平均法计算权重
%输入样例:
%A=[1 2 3 5;1/2 1 1/2 2;1/3 2 1 1/2;1/5 1/2 2 1];
%A=[1 2 3 5;1/2 1 1/2 2;1/3 2 1 2;1/5 1/2 1/2 1];
A=input('输入矩阵A=');
Asum=sum(A,1);    %将判断矩阵A的每一列求和
[n,n]=size(A);    %获取矩阵A的行和列,用于对ASum进行复制,对应位置归一化
Ar=repmat(Asum,n,1);    %复制ASum矩阵n行1列为Ar矩阵,repmat函数用于复制矩阵到指定维度
Stand_A=A./Ar;          %归一化
Asumr=sum(Stand_A,2);   %各列相加到同一行
disp(Asumr/n);          %将相加后的向量每个元素都除以n,得到权重向量

%% 2.几何平均法计算权重
%输入样例:
%A=[1 2 3 5;1/2 1 1/2 2;1/3 2 1 1/2;1/5 1/2 2 1];
%A=[1 2 3 5;1/2 1 1/2 2;1/3 2 1 2;1/5 1/2 1/2 1];
A=input('输入矩阵A=');
[n,n]=size(A);    %获取矩阵A的行和列
prod_A=prod(A,2);  %将判断矩阵A的每一列相乘,prod函数用于求矩阵的乘积
prod_n_A=prod_A.^(1/n);    %将每个元素都开n次方
re_prod_A=prod_n_A./sum(prod_n_A);    %归一化
disp(re_prod_A);    %输出权重向量

%% 3.特征值法计算权重
%输入样例:
%A=[1 2 3 5;1/2 1 1/2 2;1/3 2 1 1/2;1/5 1/2 2 1];
%A=[1 2 3 5;1/2 1 1/2 2;1/3 2 1 2;1/5 1/2 1/2 1];
A=input('输入矩阵A=');
[n,n]=size(A);    %获取矩阵A的行和列
[V,D]=eig(A);     %求出矩阵A的特征值和特征向量
Max_eig=max(max(D));    %求出矩阵A的最大特征值
[r,c]=find(Max_eig==D,1);    %找到矩阵A的最大特征值的行和列
disp(V(:,c)./sum(V(:,c)));    %输出权重



%% 新函数:

% [V,D]=eig(A);             %求出矩阵A的特征值和特征向量,V为特征向量矩阵,D为特征值构成的对角矩阵
% eig(A)函数:返回特征值和特征向量


%repmat函数用于复制矩阵到指定维度


%prod函数用于求矩阵的乘积